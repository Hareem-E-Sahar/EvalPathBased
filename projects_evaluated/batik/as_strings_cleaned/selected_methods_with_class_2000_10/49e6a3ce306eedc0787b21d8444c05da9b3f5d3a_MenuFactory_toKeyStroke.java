string SimpleName SimpleType SingleVariableDeclaration SimpleName str
state SimpleName VariableDeclarationFragment NumberLiteral empty
int PrimitiveType VariableDeclarationStatement VariableDeclarationFragment SimpleName state
int PrimitiveType VariableDeclarationStatement VariableDeclarationFragment NumberLiteral empty
code SimpleName VariableDeclarationFragment NumberLiteral empty
int PrimitiveType VariableDeclarationStatement VariableDeclarationFragment SimpleName code
int PrimitiveType VariableDeclarationStatement VariableDeclarationFragment NumberLiteral empty
modif SimpleName VariableDeclarationFragment NumberLiteral empty
int PrimitiveType VariableDeclarationStatement VariableDeclarationFragment SimpleName modif
int PrimitiveType VariableDeclarationStatement VariableDeclarationFragment NumberLiteral empty
i SimpleName VariableDeclarationFragment NumberLiteral empty
int PrimitiveType VariableDeclarationStatement VariableDeclarationFragment SimpleName i
int PrimitiveType VariableDeclarationStatement VariableDeclarationFragment NumberLiteral empty
state SimpleName InfixExpression NumberLiteral empty
str SimpleName MethodInvocation SimpleName length
i SimpleName InfixExpression MethodInvocation SimpleName str
i SimpleName InfixExpression MethodInvocation SimpleName length
state SimpleName InfixExpression InfixExpression InfixExpression SimpleName i
empty NumberLiteral InfixExpression InfixExpression InfixExpression SimpleName i
str SimpleName MethodInvocation SimpleName char at
str SimpleName MethodInvocation SimpleName i
char at SimpleName MethodInvocation SimpleName i
character SimpleName MethodInvocation SimpleName to upper case
character SimpleName MethodInvocation MethodInvocation SimpleName str
character SimpleName MethodInvocation MethodInvocation SimpleName char at
character SimpleName MethodInvocation MethodInvocation SimpleName i
to upper case SimpleName MethodInvocation MethodInvocation SimpleName str
to upper case SimpleName MethodInvocation MethodInvocation SimpleName char at
to upper case SimpleName MethodInvocation MethodInvocation SimpleName i
curr SimpleName VariableDeclarationFragment MethodInvocation SimpleName character
curr SimpleName VariableDeclarationFragment MethodInvocation SimpleName to upper case
curr SimpleName VariableDeclarationFragment MethodInvocation MethodInvocation SimpleName str
curr SimpleName VariableDeclarationFragment MethodInvocation MethodInvocation SimpleName char at
curr SimpleName VariableDeclarationFragment MethodInvocation MethodInvocation SimpleName i
char PrimitiveType VariableDeclarationStatement VariableDeclarationFragment SimpleName curr
char PrimitiveType VariableDeclarationStatement VariableDeclarationFragment MethodInvocation SimpleName character
char PrimitiveType VariableDeclarationStatement VariableDeclarationFragment MethodInvocation SimpleName to upper case
code SimpleName Assignment SimpleName curr
state SimpleName Assignment NumberLiteral empty
state SimpleName Assignment NumberLiteral empty
state SimpleName Assignment NumberLiteral empty
state SimpleName Assignment NumberLiteral empty
state SimpleName Assignment NumberLiteral empty
curr SimpleName SwitchStatement SwitchCase CharacterLiteral c
curr SimpleName SwitchStatement ExpressionStatement Assignment SimpleName state
curr SimpleName SwitchStatement ExpressionStatement Assignment NumberLiteral empty
curr SimpleName SwitchStatement SwitchCase CharacterLiteral a
curr SimpleName SwitchStatement ExpressionStatement Assignment SimpleName state
curr SimpleName SwitchStatement ExpressionStatement Assignment NumberLiteral empty
c CharacterLiteral SwitchCase SwitchStatement SwitchCase CharacterLiteral a
a CharacterLiteral SwitchCase SwitchStatement SwitchCase CharacterLiteral m
m CharacterLiteral SwitchCase SwitchStatement SwitchCase CharacterLiteral s
curr SimpleName InfixExpression CharacterLiteral t
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
t CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
t CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
empty NumberLiteral ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression CharacterLiteral r
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
r CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
r CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
empty NumberLiteral ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression CharacterLiteral l
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
l CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
l CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
empty NumberLiteral ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression CharacterLiteral +
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
+ CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
+ CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
empty NumberLiteral ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
state SimpleName InfixExpression NumberLiteral empty
modif SimpleName Assignment QualifiedName eventctrl mask
curr SimpleName InfixExpression CharacterLiteral l
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
l CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
l CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
empty NumberLiteral ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression CharacterLiteral t
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
t CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
t CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
empty NumberLiteral ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression CharacterLiteral +
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
+ CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
+ CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
empty NumberLiteral ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
state SimpleName InfixExpression NumberLiteral empty
modif SimpleName Assignment QualifiedName eventalt mask
curr SimpleName InfixExpression CharacterLiteral e
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
e CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
e CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
empty NumberLiteral ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression CharacterLiteral t
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
t CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
t CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
empty NumberLiteral ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression CharacterLiteral a
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
a CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
a CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
empty NumberLiteral ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression CharacterLiteral +
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
+ CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
+ CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
empty NumberLiteral ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
state SimpleName InfixExpression NumberLiteral empty
modif SimpleName Assignment QualifiedName eventmeta mask
curr SimpleName InfixExpression CharacterLiteral h
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
h CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
h CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
empty NumberLiteral ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression CharacterLiteral i
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
i CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
i CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
empty NumberLiteral ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression CharacterLiteral f
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
f CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
f CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
empty NumberLiteral ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression CharacterLiteral t
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
t CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
t CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
empty NumberLiteral ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression CharacterLiteral +
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
+ CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
curr SimpleName InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
+ CharacterLiteral InfixExpression ParenthesizedExpression ConditionalExpression NumberLiteral empty
empty NumberLiteral ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
state SimpleName Assignment ConditionalExpression NumberLiteral empty
state SimpleName InfixExpression NumberLiteral empty
modif SimpleName Assignment QualifiedName eventshift mask
state SimpleName SwitchStatement SwitchCase NumberLiteral empty
state SimpleName SwitchStatement ExpressionStatement Assignment SimpleName code
state SimpleName SwitchStatement ExpressionStatement Assignment SimpleName curr
state SimpleName SwitchStatement SwitchStatement SimpleName curr
state SimpleName SwitchStatement SwitchStatement SwitchCase CharacterLiteral c
state SimpleName SwitchStatement SwitchStatement SwitchCase CharacterLiteral a
state SimpleName SwitchStatement SwitchStatement SwitchCase CharacterLiteral m
state SimpleName SwitchStatement SwitchStatement SwitchCase CharacterLiteral s
state SimpleName SwitchStatement SwitchCase NumberLiteral empty
empty NumberLiteral SwitchCase SwitchStatement SwitchStatement SimpleName curr
empty NumberLiteral SwitchCase SwitchStatement SwitchCase NumberLiteral empty
curr SimpleName SwitchStatement SwitchStatement SwitchCase NumberLiteral empty
curr SimpleName SwitchStatement SwitchStatement SwitchCase NumberLiteral empty
empty NumberLiteral SwitchCase SwitchStatement SwitchCase NumberLiteral empty
empty NumberLiteral SwitchCase SwitchStatement SwitchCase NumberLiteral empty
empty NumberLiteral SwitchCase SwitchStatement SwitchCase NumberLiteral empty
empty NumberLiteral SwitchCase SwitchStatement SwitchCase NumberLiteral empty
empty NumberLiteral SwitchCase SwitchStatement SwitchCase NumberLiteral empty
empty NumberLiteral SwitchCase SwitchStatement SwitchCase NumberLiteral empty
empty NumberLiteral SwitchCase SwitchStatement SwitchCase NumberLiteral empty
empty NumberLiteral SwitchCase SwitchStatement SwitchCase NumberLiteral empty
empty NumberLiteral SwitchCase SwitchStatement SwitchCase NumberLiteral empty
empty NumberLiteral SwitchCase SwitchStatement SwitchCase NumberLiteral empty
empty NumberLiteral SwitchCase SwitchStatement SwitchCase NumberLiteral empty
empty NumberLiteral SwitchCase SwitchStatement SwitchCase NumberLiteral empty
empty NumberLiteral SwitchCase SwitchStatement SwitchCase NumberLiteral empty
empty NumberLiteral SwitchCase SwitchStatement SwitchCase NumberLiteral empty
empty NumberLiteral SwitchCase SwitchStatement SwitchCase NumberLiteral empty
char PrimitiveType VariableDeclarationStatement Block SwitchStatement SimpleName state
code SimpleName InfixExpression NumberLiteral empty
modif SimpleName InfixExpression NumberLiteral empty
code SimpleName InfixExpression InfixExpression InfixExpression SimpleName modif
code SimpleName InfixExpression InfixExpression InfixExpression NumberLiteral empty
empty NumberLiteral InfixExpression InfixExpression InfixExpression SimpleName modif
empty NumberLiteral InfixExpression InfixExpression InfixExpression NumberLiteral empty
key stroke SimpleName MethodInvocation SimpleName get key stroke
key stroke SimpleName MethodInvocation SimpleName code
key stroke SimpleName MethodInvocation SimpleName modif
get key stroke SimpleName MethodInvocation SimpleName code
get key stroke SimpleName MethodInvocation SimpleName modif
code SimpleName MethodInvocation SimpleName modif
int PrimitiveType VariableDeclarationStatement Block VariableDeclarationStatement PrimitiveType int
int PrimitiveType VariableDeclarationStatement Block VariableDeclarationStatement PrimitiveType int
int PrimitiveType VariableDeclarationStatement Block VariableDeclarationStatement PrimitiveType int
int PrimitiveType VariableDeclarationStatement Block VariableDeclarationStatement PrimitiveType int
int PrimitiveType VariableDeclarationStatement Block VariableDeclarationStatement PrimitiveType int
int PrimitiveType VariableDeclarationStatement Block VariableDeclarationStatement PrimitiveType int
protected Modifier MethodDeclaration SimpleType SimpleName key stroke
protected Modifier MethodDeclaration SimpleName to key stroke
protected Modifier MethodDeclaration SingleVariableDeclaration SimpleType SimpleName string
protected Modifier MethodDeclaration SingleVariableDeclaration SimpleName str
protected Modifier MethodDeclaration Block VariableDeclarationStatement PrimitiveType int
protected Modifier MethodDeclaration Block VariableDeclarationStatement PrimitiveType int
protected Modifier MethodDeclaration Block VariableDeclarationStatement PrimitiveType int
protected Modifier MethodDeclaration Block VariableDeclarationStatement PrimitiveType int
key stroke SimpleName SimpleType MethodDeclaration SimpleName to key stroke
key stroke SimpleName SimpleType MethodDeclaration SingleVariableDeclaration SimpleName str
to key stroke SimpleName MethodDeclaration SingleVariableDeclaration SimpleType SimpleName string
to key stroke SimpleName MethodDeclaration SingleVariableDeclaration SimpleName str
to key stroke SimpleName MethodDeclaration Block VariableDeclarationStatement PrimitiveType int
to key stroke SimpleName MethodDeclaration Block VariableDeclarationStatement PrimitiveType int
to key stroke SimpleName MethodDeclaration Block VariableDeclarationStatement PrimitiveType int
to key stroke SimpleName MethodDeclaration Block VariableDeclarationStatement PrimitiveType int
public Modifier TypeDeclaration SimpleName test
public Modifier TypeDeclaration MethodDeclaration Modifier protected
public Modifier TypeDeclaration MethodDeclaration SimpleType SimpleName key stroke
public Modifier TypeDeclaration MethodDeclaration SimpleName to key stroke
public Modifier TypeDeclaration MethodDeclaration SingleVariableDeclaration SimpleName str
test SimpleName TypeDeclaration MethodDeclaration Modifier protected
test SimpleName TypeDeclaration MethodDeclaration SimpleType SimpleName key stroke
test SimpleName TypeDeclaration MethodDeclaration SimpleName to key stroke
test SimpleName TypeDeclaration MethodDeclaration SingleVariableDeclaration SimpleName str
